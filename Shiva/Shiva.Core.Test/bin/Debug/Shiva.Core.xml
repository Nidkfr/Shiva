<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shiva.Core</name>
    </assembly>
    <members>
        <member name="T:Shiva.Core.Ioc.IServiceContainer">
            <summary>
            Abstraction for Ioc containers with basic functionallity
            </summary>
        </member>
        <member name="M:Shiva.Core.Ioc.IServiceContainer.Register``2(Shiva.Core.Ioc.ScopeServiceEnum)">
            <summary>
            Registers this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">Type of instance of service</typeparam>
            <param name="scope">Scope for service</param>
        </member>
        <member name="M:Shiva.Core.Ioc.IServiceContainer.RegisterSingleton``1(``0)">
            <summary>
            Registers the specified service in container.
            </summary>
            <typeparam name="TService">Service contract</typeparam>
            <param name="service">The service implementation.</param>
        </member>
        <member name="M:Shiva.Core.Ioc.IServiceContainer.Register``1(System.Func{``0},Shiva.Core.Ioc.ScopeServiceEnum)">
            <summary>
            Registers the specified service factory.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceFactory">The service factory.</param>
            <param name="scope">Scope for service</param>
        </member>
        <member name="M:Shiva.Core.Ioc.IServiceContainer.ResolveType``1">
            <summary>
            Resolves the type.
            </summary>
            <typeparam name="TService">Service Contract</typeparam>
            <returns>Service implementation</returns>
        </member>
        <member name="T:Shiva.Core.Ioc.ScopeServiceEnum">
            <summary>
            Scope mode for service container
            </summary>
        </member>
        <member name="F:Shiva.Core.Ioc.ScopeServiceEnum.Transient">
            <summary>
            Return a new Instance of object at each Resolve
            </summary>
        </member>
        <member name="F:Shiva.Core.Ioc.ScopeServiceEnum.Singleton">
            <summary>
            Return the same instance of object at each Resolve
            </summary>
        </member>
        <member name="T:Shiva.Core.Ioc.ServiceContainerBase">
            <summary>
            Service container base
            </summary>
            <seealso cref="T:Shiva.Core.Ioc.IServiceContainer" />
        </member>
        <member name="P:Shiva.Core.Ioc.ServiceContainerBase.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.#ctor(Shiva.Core.Services.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Shiva.Core.Ioc.ServiceContainerBase"/> class.
            </summary>
            <param name="logmanager">The logger.</param>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.Register``2(Shiva.Core.Ioc.ScopeServiceEnum)">
            <summary>
            Registers this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">Type of instance of service</typeparam>
            <param name="scope">Scope for service</param>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.Register``1(System.Func{``0},Shiva.Core.Ioc.ScopeServiceEnum)">
            <summary>
            Registers the specified service factory.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceFactory">The service factory.</param>
            <param name="scope">Scope for service</param>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.RegisterSingleton``1(``0)">
            <summary>
            Registers the specified service in container.
            </summary>
            <typeparam name="TService">Service contract</typeparam>
            <param name="service">The service implementation.</param>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.ResolveType``1">
            <summary>
            Resolves the type.
            </summary>
            <typeparam name="TService">Service Contract</typeparam>
            <returns>
            Service implementation
            </returns>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.InternalResolveType``1">
            <summary>
            Internals implementation of resolving type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>service implementation</returns>
        </member>
        <member name="M:Shiva.Core.Ioc.ServiceContainerBase.InternalRegister``1(System.Func{``0},Shiva.Core.Ioc.ScopeServiceEnum)">
            <summary>
            Internals the register.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceFactory">The service factory.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="T:Shiva.Core.Services.ILogger">
            <summary>
            Abstraction for logger
            </summary>
        </member>
        <member name="P:Shiva.Core.Services.ILogger.InfoIsEnabled">
            <summary>
            Gets a value indicating whether [information is enabled].
            </summary>
            <value>
            <c>true</c> if [information is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Info(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log informations specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The culture.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Info(System.String)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Info(System.String,System.Object[])">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Shiva.Core.Services.ILogger.DebugIsEnabled">
            <summary>
            Gets a value indicating whether [debug is enabled].
            </summary>
            <value>
              <c>true</c> if [debug is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Debug(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log debugs specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Debug(System.String)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Shiva.Core.Services.ILogger.WarnIsEnabled">
            <summary>
            Gets a value indicating whether [warn is enabled].
            </summary>
            <value>
              <c>true</c> if [warn is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Warn(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log warning specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Warn(System.String)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Shiva.Core.Services.ILogger.ErrorIsEnabled">
            <summary>
            Gets a value indicating whether [error is enabled].
            </summary>
            <value>
              <c>true</c> if [error is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Error(System.String,System.IFormatProvider,System.Object[])">
            <summary>
             Log Errors specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Error(System.String,System.Object[])">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Error(System.String)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Shiva.Core.Services.ILogger.Error(System.Exception)">
            <summary>
            Log errors  specified exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Shiva.Core.Services.ILogManager">
            <summary>
            Abstraction for Log Management
            </summary>
        </member>
        <member name="M:Shiva.Core.Services.ILogManager.CreateLogger(System.String)">
            <summary>
            Creates the logger.
            </summary>
            <param name="name">The name of logger.</param>
            <returns>a logger</returns>
        </member>
        <member name="M:Shiva.Core.Services.ILogManager.CreateLogger``1">
            <summary>
            Creates the logger.
            </summary>
            <typeparam name="Type">The type name for logger.</typeparam>
            <returns>a logger</returns>
        </member>
        <member name="M:Shiva.Core.Services.ILogManager.CreateLogger(System.Type)">
            <summary>
            Creates the logger.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Shiva.Core.Services.NoLogger">
            <summary>
            No logger
            </summary>
            <seealso cref="T:Shiva.Core.Services.ILogger" />
        </member>
        <member name="P:Shiva.Core.Services.NoLogger.InfoIsEnabled">
            <summary>
            Gets a value indicating whether [information is enabled].
            </summary>
            <value>
            <c>true</c> if [information is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shiva.Core.Services.NoLogger.DebugIsEnabled">
            <summary>
            Gets a value indicating whether [debug is enabled].
            </summary>
            <value>
            <c>true</c> if [debug is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shiva.Core.Services.NoLogger.WarnIsEnabled">
            <summary>
            Gets a value indicating whether [warn is enabled].
            </summary>
            <value>
            <c>true</c> if [warn is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shiva.Core.Services.NoLogger.ErrorIsEnabled">
            <summary>
            Gets a value indicating whether [error is enabled].
            </summary>
            <value>
            <c>true</c> if [error is enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Debug(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log debugs specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Debug(System.String,System.Object[])">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Debug(System.String)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Error(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log Errors specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Error(System.Exception)">
            <summary>
            Log errors  specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Error(System.String,System.Object[])">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Error(System.String)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Info(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log informations specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The culture.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Info(System.String)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Info(System.String,System.Object[])">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Warn(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Log warning specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="format">The format.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Warn(System.String,System.Object[])">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shiva.Core.Services.NoLogger.Warn(System.String)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Shiva.Core.Tasks.TaskWorkingInformation">
            <summary>
            A simple working Task Information
            </summary>
        </member>
        <member name="P:Shiva.Core.Tasks.TaskWorkingInformation.WorkingInformation">
            <summary>
            Gets or sets the working information.
            </summary>
            <value>
            The working information.
            </value>
        </member>
        <member name="T:Shiva.Exceptions.InvalidTypeConstructorForServiceContainerException">
            <summary>
            Exception : Type constructor is invalid for service container
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Shiva.Exceptions.InvalidTypeConstructorForServiceContainerException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Shiva.Exceptions.InvalidTypeConstructorForServiceContainerException"/> class.
            </summary>
            <param name="invalidType">Type of the invalid.</param>
        </member>
        <member name="P:Shiva.Exceptions.InvalidTypeConstructorForServiceContainerException.InvalidType">
            <summary>
            Gets the type of the invalid.
            </summary>
            <value>
            The type of the invalid.
            </value>
        </member>
        <member name="P:Shiva.Exceptions.InvalidTypeConstructorForServiceContainerException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
    </members>
</doc>
